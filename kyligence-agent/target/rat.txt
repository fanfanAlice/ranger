
*****************************************************
Summary
-------
Generated at: 2021-10-09T11:25:45+08:00
Notes: 0
Binaries: 0
Archives: 0
Standards: 10

Apache Licensed: 1
Generated Documents: 0

JavaDocs are generated and so license header is optional
Generated files do not required license headers

9 Unknown Licenses

*******************************

Unapproved licenses:

  src/test/java/org/apache/ranger/authorization/kyligence/authorizer/TestKyligenceClient.java
  src/main/java/org/apache/ranger/authorization/kyligence/authorizer/RangerKyligenceAuthorizer.java
  src/main/java/org/apache/ranger/services/kyligence/RangerServiceKyligence.java
  src/main/java/org/apache/ranger/services/kyligence/client/impl/KEClientImpl.java
  src/main/java/org/apache/ranger/services/kyligence/client/IClient.java
  src/main/java/org/apache/ranger/services/kyligence/client/KyligenceClient.java
  src/main/java/org/apache/ranger/services/kyligence/client/KyligenceResourceMgr.java
  src/main/java/org/apache/ranger/services/kyligence/client/json/model/KylinProjectResponse.java
  src/main/java/org/apache/ranger/services/kyligence/client/KyligenceConnectionManager.java

*******************************

Archives:

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require AL headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc will be marked N
  AL    pom.xml
 !????? src/test/java/org/apache/ranger/authorization/kyligence/authorizer/TestKyligenceClient.java
 !????? src/main/java/org/apache/ranger/authorization/kyligence/authorizer/RangerKyligenceAuthorizer.java
 !????? src/main/java/org/apache/ranger/services/kyligence/RangerServiceKyligence.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/impl/KEClientImpl.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/IClient.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/KyligenceClient.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/KyligenceResourceMgr.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/json/model/KylinProjectResponse.java
 !????? src/main/java/org/apache/ranger/services/kyligence/client/KyligenceConnectionManager.java
 
*****************************************************
 Printing headers for files without AL header...
 
 
=======================================================================
==src/test/java/org/apache/ranger/authorization/kyligence/authorizer/TestKyligenceClient.java
=======================================================================
package org.apache.ranger.authorization.kyligence.authorizer;

import com.google.common.collect.Maps;
import org.apache.ranger.services.kyligence.client.KyligenceClient;
import org.junit.Test;

import java.io.IOException;
import java.util.List;
import java.util.Map;

public class TestKyligenceClient {

    @Test
    public void testGetProjectList() {
        Map<String, String> configs = Maps.newConcurrentMap();
        configs.put("kyligence.url", "http://10.1.2.181:7079");
        configs.put("username", "admin");
        configs.put("password", "test@1234");
        KyligenceClient client = new KyligenceClient("select", configs);
        List<String> projectList = null;
        try {
            projectList = client.getProjectList("*", null);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        System.out.println(projectList);
    }
}

=======================================================================
==src/main/java/org/apache/ranger/authorization/kyligence/authorizer/RangerKyligenceAuthorizer.java
=======================================================================
package org.apache.ranger.authorization.kyligence.authorizer;

public class RangerKyligenceAuthorizer {


}

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/RangerServiceKyligence.java
=======================================================================
package org.apache.ranger.services.kyligence;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.ranger.plugin.client.HadoopConfigHolder;
import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.service.RangerBaseService;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.services.kyligence.client.KyligenceResourceMgr;

import java.util.*;

public class RangerServiceKyligence extends RangerBaseService {

    private static final Log LOG = LogFactory.getLog(RangerServiceKyligence.class);

    public static final String ACCESS_TYPE_SELECT = "select";

    @Override
    public List<RangerPolicy> getDefaultRangerPolicies() throws Exception {
        if (LOG.isDebugEnabled()) {
            LOG.debug("==> RangerServiceKyligence.getDefaultRangerPolicies()");
        }

        List<RangerPolicy> ret = super.getDefaultRangerPolicies();
        for (RangerPolicy defaultPolicy : ret) {
            if (defaultPolicy.getName().contains("all") && StringUtils.isNotBlank(lookUpUser)) {
                List<RangerPolicy.RangerPolicyItemAccess> accessListForLookupUser = new ArrayList<RangerPolicy.RangerPolicyItemAccess>();
                accessListForLookupUser.add(new RangerPolicy.RangerPolicyItemAccess(ACCESS_TYPE_SELECT));
                RangerPolicy.RangerPolicyItem policyItemForLookupUser = new RangerPolicy.RangerPolicyItem();
                policyItemForLookupUser.setUsers(Collections.singletonList(lookUpUser));
                policyItemForLookupUser.setAccesses(accessListForLookupUser);
                policyItemForLookupUser.setDelegateAdmin(false);
                defaultPolicy.getPolicyItems().add(policyItemForLookupUser);
            }
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug("<== RangerServiceKyligence.getDefaultRangerPolicies()");
        }
        return ret;
    }

    @Override
    public Map<String, Object> validateConfig() throws Exception {
        Map<String, Object> ret = new HashMap<String, Object>();
        String serviceName = getServiceName();
        if (LOG.isDebugEnabled()) {
            LOG.debug("==> RangerServiceKyligence.validateConfig Service: (" + serviceName + " )");

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/impl/KEClientImpl.java
=======================================================================
package org.apache.ranger.services.kyligence.client.impl;

import com.google.common.collect.Lists;
import com.google.gson.*;
import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.apache.ranger.services.kyligence.client.IClient;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.List;

public class KEClientImpl implements IClient {

    private static final Logger LOG = Logger.getLogger(KEClientImpl.class);

    private final String baseUrl;

    private final String encodeKey;

    public KEClientImpl(String url, String username, String password) {
        this.baseUrl = url + "/kylin/api/";
        this.encodeKey = new String(Base64.encodeBase64((username + ":" + password).getBytes()));
    }


    @Override
    public boolean active() {
        try {
            String url = baseUrl + "projects?pageSize=10";
            new JsonParser().parse(send(url, "GET", null)).getAsJsonObject();
            return true;
        } catch (Throwable e) {
            LOG.error(e.getMessage(), e);
            return false;
        }
    }

    @Override
    public List<String> getProjectList() throws IOException {
        String url = baseUrl + "projects?pageSize=1000";
        JsonObject data = new JsonParser().parse(send(url, "GET", null)).getAsJsonObject();
        if (null == data)
            throw new RuntimeException("Failed to get Kyligence projects by api: " + url);
        List<String> list = Lists.newArrayList();
        JsonObject object = data.getAsJsonObject("data");

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/IClient.java
=======================================================================
package org.apache.ranger.services.kyligence.client;

import java.io.IOException;
import java.util.List;

public interface IClient {

    boolean active();

    List<String> getProjectList() throws IOException;

    List<String> getDatabases(String project, String database) throws IOException;

    List<String> getTables(String project, List<String> database, String table) throws IOException;

    List<String> getColumns(String project, String database, String table, String column) throws IOException;


}

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/KyligenceClient.java
=======================================================================
package org.apache.ranger.services.kyligence.client;

import com.google.common.collect.Lists;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.ranger.plugin.client.BaseClient;
import org.apache.ranger.plugin.client.HadoopException;
import org.apache.ranger.services.kyligence.client.impl.KEClientImpl;

import javax.security.auth.Subject;
import java.io.IOException;
import java.security.PrivilegedAction;
import java.util.*;

public class KyligenceClient extends BaseClient {

    private static final Logger LOG = Logger.getLogger(KyligenceClient.class);

    private static final String ERROR_MESSAGE = " You can still save the repository and start creating "
            + "policies, but you would not be able to use autocomplete for "
            + "resource names. Check ranger_admin.log for more info.";

    private String kylinUrl;
    private String userName;
    private String password;

    public KyligenceClient(String serviceName, Map<String, String> configs) {

        super(serviceName, configs, "kyligence-client");

        this.kylinUrl = configs.get("kyligence.url");
        this.userName = configs.get("username");
        this.password = configs.get("password");

        if (StringUtils.isEmpty(this.kylinUrl)) {
            LOG.error("No value found for configuration 'kyligence.url'. kyligence resource lookup will fail.");
        }
        if (StringUtils.isEmpty(this.userName)) {
            LOG.error("No value found for configuration 'username'. kyligence resource lookup will fail.");
        }
        if (StringUtils.isEmpty(this.password)) {
            LOG.error("No value found for configuration 'password'. kyligence resource lookup will fail.");
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug("kyligence client is build with url [" + this.kylinUrl + "], user: [" + this.userName
                    + "], password: [" + "*********" + "].");
        }

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/KyligenceResourceMgr.java
=======================================================================
package org.apache.ranger.services.kyligence.client;

import org.apache.log4j.Logger;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.apache.ranger.plugin.util.TimedEventUtil;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

public class KyligenceResourceMgr {

    public static final String PROJECT = "project";
    private static final String DATABASE = "database";
    private static final String TABLE = "table";
    private static final String COLUMN = "column";

    private static final Logger LOG = Logger.getLogger(KyligenceResourceMgr.class);

    public static Map<String, Object> validateConfig(String serviceName, Map<String, String> configs) throws IOException {
        Map<String, Object> ret ;

        if (LOG.isDebugEnabled()) {
            LOG.debug("==> KyligenceResourceMgr.validateConfig ServiceName: " + serviceName + "Configs" + configs);
        }

        try {
            ret = KyligenceClient.connectionTest(serviceName, configs);
        } catch (Exception e) {
            LOG.error("<== KyligenceResourceMgr.validateConfig Error: " + e);
            throw e;
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug("<== KyligenceResourceMgr.validateConfig Result: " + ret);
        }
        return ret;
    }

    public static List<String> getKylinResources(String serviceName, String serviceType, Map<String, String> configs,
                                                 ResourceLookupContext context) throws Exception {
        String userInput = context.getUserInput();
        String resource = context.getResourceName();
        Map<String, List<String>> resourceMap = context.getResources();
        List<String> resultList = null;
        List<String> projectList = null;
        List<String> databaseList = null;
        List<String> tableList = null;

=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/json/model/KylinProjectResponse.java
=======================================================================
package org.apache.ranger.services.kyligence.client.json.model;

import java.util.List;

public class KylinProjectResponse {

    private String uuid;

    private String version;

    private String name;

    private String owner;

    private String status;

    private String description;

    private List<String> tables;

    private List<String> models;

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getOwner() {
        return owner;
    }


=======================================================================
==src/main/java/org/apache/ranger/services/kyligence/client/KyligenceConnectionManager.java
=======================================================================
package org.apache.ranger.services.kyligence.client;

import org.apache.log4j.Logger;
import org.apache.ranger.plugin.util.TimedEventUtil;

import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;

public class KyligenceConnectionManager {

    private static final Logger LOG = Logger.getLogger(KyligenceConnectionManager.class);

    protected ConcurrentMap<String, KyligenceClient> kyligenceConnectionCache;
    protected ConcurrentMap<String, Boolean> repoConnectStatusMap;

    public KyligenceConnectionManager() {
        kyligenceConnectionCache = new ConcurrentHashMap<>();
        repoConnectStatusMap = new ConcurrentHashMap<>();
    }

    public KyligenceClient getKyligenceConnection(final String serviceName, final String serviceType, final Map<String, String> configs) {
        KyligenceClient kyligenceClient = null;

        if (serviceType != null) {
            kyligenceClient = kyligenceConnectionCache.get(serviceName);
            if (kyligenceClient == null) {
                if (configs != null) {
                    final Callable<KyligenceClient> connectKyligence = new Callable<KyligenceClient>() {
                        @Override
                        public KyligenceClient call() throws Exception {
                            return new KyligenceClient(serviceName, configs);
                        }
                    };
                    try {
                        kyligenceClient = TimedEventUtil.timedTask(connectKyligence, 5, TimeUnit.SECONDS);
                    } catch (Exception e) {
                        LOG.error("Error connecting to Presto repository: " +
                                serviceName + " using config: " + configs, e);
                    }

                    KyligenceClient oldClient = null;
                    if (kyligenceClient != null) {
                        oldClient = kyligenceConnectionCache.putIfAbsent(serviceName, kyligenceClient);
                    } else {
                        oldClient = kyligenceConnectionCache.get(serviceName);
                    }

